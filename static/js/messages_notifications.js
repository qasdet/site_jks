// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
class MessagesNotifications {
    constructor() {
        this.checkInterval = 8000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
        this.lastCount = 0;
        this.lastMessageId = 0;
        this.notificationContainer = null;
        this.notificationSound = null;
        this.isInitialized = false;
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.createNotificationContainer();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.initNotificationSound();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        this.startChecking();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.checkNewMessages();
        
        this.isInitialized = true;
        console.log('üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    createNotificationContainer() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        this.notificationContainer = document.createElement('div');
        this.notificationContainer.id = 'messages-notifications';
        this.notificationContainer.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
            pointer-events: none;
        `;
        document.body.appendChild(this.notificationContainer);
    }

    initNotificationSound() {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
            
            this.notificationSound = () => {
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.5);
            };
        } catch (error) {
            console.log('üîá –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            this.notificationSound = () => {};
        }
    }

    startChecking() {
        setInterval(() => {
            this.checkNewMessages();
        }, this.checkInterval);
    }

    async checkNewMessages() {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
            const [countResponse, messagesResponse] = await Promise.all([
                fetch('/messages/api/unread-count'),
                fetch('/messages/api/latest-messages')
            ]);
            
            const countData = await countResponse.json();
            const messagesData = await messagesResponse.json();
            
            console.log('üìä –î–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:', {
                count: countData.count,
                lastCount: this.lastCount,
                isInitialized: this.isInitialized,
                messagesCount: messagesData.messages.length
            });
            
            if (countData.count > this.lastCount && this.lastCount > 0) {
                // –ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const newCount = countData.count - this.lastCount;
                console.log(`üÜï –ù–∞–π–¥–µ–Ω–æ ${newCount} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!`);
                this.showNewMessageNotification(newCount, messagesData.messages);
                this.updateMessagesBadge(countData.count);
                this.playNotificationSound();
            } else if (countData.count > 0 && !this.isInitialized) {
                // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                console.log(`üì± –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${countData.count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
                this.updateMessagesBadge(countData.count);
            }
            
            this.lastCount = countData.count;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (messagesData.messages.length > 0) {
                this.lastMessageId = Math.max(...messagesData.messages.map(m => m.id));
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }

    showNewMessageNotification(newCount, messages) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        const notification = document.createElement('div');
        notification.className = 'message-notification';
        notification.style.cssText = `
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.2);
            transform: translateX(100%) scale(0.9);
            transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            pointer-events: auto;
            cursor: pointer;
            font-family: 'Segoe UI', sans-serif;
            border: 1px solid rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
        `;
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        let notificationContent = `
            <div style="display: flex; align-items: flex-start; gap: 12px;">
                <div style="font-size: 1.5em; margin-top: 2px;">üí¨</div>
                <div style="flex: 1;">
                    <div style="font-weight: 700; margin-bottom: 4px; font-size: 1.1em;">
                        –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ${newCount > 1 ? '–∞' : ''}!
                    </div>
        `;
        
        if (messages && messages.length > 0) {
            const latestMessage = messages[0];
            notificationContent += `
                    <div style="font-size: 0.9em; opacity: 0.9; margin-bottom: 8px;">
                        –û—Ç: <strong>${latestMessage.sender}</strong>
                    </div>
                    <div style="font-size: 0.85em; opacity: 0.8; line-height: 1.4; margin-bottom: 10px;">
                        "${latestMessage.content}"
                    </div>
            `;
        }
        
        notificationContent += `
                    <div style="font-size: 0.8em; opacity: 0.7; font-style: italic;">
                        –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    </div>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" style="
                    background: none; border: none; color: white; cursor: pointer; 
                    font-size: 1.2em; opacity: 0.7; padding: 0; width: 20px; height: 20px;
                    display: flex; align-items: center; justify-content: center;
                ">√ó</button>
            </div>
        `;
        
        notification.innerHTML = notificationContent;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.notificationContainer.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0) scale(1)';
        }, 100);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        notification.addEventListener('click', (e) => {
            if (e.target.tagName !== 'BUTTON') {
                window.location.href = '/messages/';
            }
        });
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        notification.addEventListener('mouseenter', () => {
            notification.style.transform = 'translateX(0) scale(1.02)';
            notification.style.boxShadow = '0 12px 40px rgba(0,0,0,0.3)';
        });
        
        notification.addEventListener('mouseleave', () => {
            notification.style.transform = 'translateX(0) scale(1)';
            notification.style.boxShadow = '0 8px 32px rgba(0,0,0,0.2)';
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.transform = 'translateX(100%) scale(0.9)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        }, 8000);
    }

    playNotificationSound() {
        if (this.notificationSound) {
            this.notificationSound();
        }
    }

    updateMessagesBadge(count) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        let badge = document.getElementById('messages-badge');
        
        if (count > 0) {
            if (!badge) {
                // –°–æ–∑–¥–∞–µ–º –±–µ–π–¥–∂, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const messagesLink = document.querySelector('a[href="/messages/"]');
                if (messagesLink) {
                    badge = document.createElement('span');
                    badge.id = 'messages-badge';
                    badge.style.cssText = `
                        position: absolute;
                        top: -8px;
                        right: -8px;
                        background: linear-gradient(135deg, #dc3545 0%, #ff6f6f 100%);
                        color: white;
                        border-radius: 50%;
                        width: 22px;
                        height: 22px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 0.75em;
                        font-weight: bold;
                        min-width: 22px;
                        box-shadow: 0 2px 8px rgba(220,53,69,0.3);
                        animation: pulse 2s infinite;
                    `;
                    messagesLink.style.position = 'relative';
                    messagesLink.appendChild(badge);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
                    if (!document.getElementById('badge-pulse-animation')) {
                        const style = document.createElement('style');
                        style.id = 'badge-pulse-animation';
                        style.textContent = `
                            @keyframes pulse {
                                0% { transform: scale(1); }
                                50% { transform: scale(1.1); }
                                100% { transform: scale(1); }
                            }
                        `;
                        document.head.appendChild(style);
                    }
                }
            }
            
            if (badge) {
                badge.textContent = count > 99 ? '99+' : count;
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                badge.style.animation = 'none';
                setTimeout(() => {
                    badge.style.animation = 'pulse 2s infinite';
                }, 10);
            }
        } else {
            // –£–¥–∞–ª—è–µ–º –±–µ–π–¥–∂, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (badge) {
                badge.remove();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
    forceCheck() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
        this.checkNewMessages();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
window.testMessageNotification = function() {
    if (window.messagesNotifications) {
        window.messagesNotifications.showNewMessageNotification(1, [{
            id: 999,
            sender: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!',
            sent_at: new Date().toLocaleString()
        }]);
        window.messagesNotifications.playNotificationSound();
    } else {
        console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
}; 